package org.github.echeneidae;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Date;

/**
 * @author hongliuliao 2014-4-11 上午11:27:04
 */
public class EcheneidaeStatement implements Statement {

	/**
	 * the connection which create this statement
	 */
	private EcheneidaeConnection echeneidaeConnection;

	protected Statement rawStatement;
	
	/**
	 * @param echeneidaeConnection
	 * @param rawStatement
	 */
	public EcheneidaeStatement(EcheneidaeConnection echeneidaeConnection,
			Statement rawStatement) {
		super();
		this.echeneidaeConnection = echeneidaeConnection;
		this.rawStatement = rawStatement;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return rawStatement.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return rawStatement.isWrapperFor(iface);
	}

	/**
	 * 在执行sql出现异常的时候检查,如果有问题,就标记连接为不可用
	 */
	protected void checkConnectWhenException() {
		if (!echeneidaeConnection.checkConnect()) {
			echeneidaeConnection.setValid(false);
		}
	}
	
	/**
	 * 执行完sql之后的操作
	 */
	protected void afterExecute() {
		this.echeneidaeConnection.setLastInteractTime((int) (new Date().getTime() / 1000));
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		try {
			return rawStatement.executeQuery(sql);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		try {
			return rawStatement.executeUpdate(sql);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public int[] executeBatch() throws SQLException {
		try {
			return rawStatement.executeBatch();
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		try {
			return rawStatement.executeUpdate(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		try {
			return rawStatement.executeUpdate(sql, columnIndexes);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		try {
			return rawStatement.executeUpdate(sql, columnNames);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		try {
			return rawStatement.execute(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		try {
			return rawStatement.execute(sql, columnIndexes);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		try {
			return rawStatement.execute(sql, columnNames);
		} catch (SQLException e) {
			checkConnectWhenException();
			throw e;
		} finally {
			afterExecute();
		}
	}

	@Override
	public void close() throws SQLException {
		rawStatement.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return rawStatement.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		rawStatement.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return rawStatement.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		rawStatement.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		rawStatement.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return rawStatement.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		rawStatement.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		rawStatement.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return rawStatement.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		rawStatement.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		rawStatement.setCursorName(name);
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return rawStatement.execute(sql);
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return rawStatement.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return rawStatement.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return rawStatement.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		rawStatement.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return rawStatement.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		rawStatement.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return rawStatement.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return rawStatement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return rawStatement.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		rawStatement.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		rawStatement.clearBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return echeneidaeConnection;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return rawStatement.getMoreResults(current);
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return rawStatement.getGeneratedKeys();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return rawStatement.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return rawStatement.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		rawStatement.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return rawStatement.isPoolable();
	}

}
